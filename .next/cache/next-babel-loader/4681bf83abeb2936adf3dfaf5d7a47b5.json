{"ast":null,"code":"var _jsxFileName = \"D:\\\\Kent\\\\Web Development\\\\repo\\\\work\\\\Shopify-Template\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Fragment } from \"react\";\nimport fetch from \"node-fetch\";\nimport App from \"next/app\";\nimport { ThemeProvider } from \"styled-components\";\nimport theme from \"../theme\";\nimport GlobalStyle from \"../components/GlobalTheme\";\nimport { ApolloClient } from \"apollo-client\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloProvider } from \"react-apollo\";\nconst httpLink = createHttpLink({\n  uri: process.env.SHOPIFY_URI,\n  fetch: fetch\n});\nconsole.log(process.env.SHOPIFY_URI);\nconst middlewareLink = setContext(() => ({\n  headers: {\n    \"X-Shopify-Storefront-Access-Token\": process.env.STOREFRONT_API\n  }\n}));\nconst client = new ApolloClient({\n  link: middlewareLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nconst reducer = (state = {}, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n/**\r\n * @param {object} initialState\r\n * @param {boolean} options.isServer indicates whether it is a server side or client side\r\n * @param {Request} options.req NodeJS Request object (not set when client applies initialState from server)\r\n * @param {Request} options.res NodeJS Request object (not set when client applies initialState from server)\r\n * @param {boolean} options.debug User-defined debug mode param\r\n * @param {string} options.storeKey This key will be used to preserve store in global namespace for safe HMR\r\n */\n\n\nconst makeStore = (initialState, options) => {\n  return createStore(reducer, initialState);\n};\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, __jsx(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, __jsx(ThemeProvider, _extends({\n      theme\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), __jsx(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, __jsx(GlobalStyle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), __jsx(Component, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default MyApp;","map":{"version":3,"sources":["D:/Kent/Web Development/repo/work/Shopify-Template/pages/_app.js"],"names":["React","Fragment","fetch","App","ThemeProvider","theme","GlobalStyle","ApolloClient","createHttpLink","setContext","InMemoryCache","ApolloProvider","httpLink","uri","process","env","SHOPIFY_URI","console","log","middlewareLink","headers","STOREFRONT_API","client","link","concat","cache","reducer","state","action","type","makeStore","initialState","options","createStore","MyApp","getInitialProps","Component","ctx","pageProps","render","store"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,MAAMC,QAAQ,GAAGJ,cAAc,CAAC;AAC/BK,EAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,WADc;AAE/Bd,EAAAA,KAAK,EAAEA;AAFwB,CAAD,CAA/B;AAKAe,OAAO,CAACC,GAAR,CAAYJ,OAAO,CAACC,GAAR,CAAYC,WAAxB;AAEA,MAAMG,cAAc,GAAGV,UAAU,CAAC,OAAO;AACxCW,EAAAA,OAAO,EAAE;AACR,yCAAqCN,OAAO,CAACC,GAAR,CAAYM;AADzC;AAD+B,CAAP,CAAD,CAAjC;AAMA,MAAMC,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AAC/BgB,EAAAA,IAAI,EAAEJ,cAAc,CAACK,MAAf,CAAsBZ,QAAtB,CADyB;AAE/Ba,EAAAA,KAAK,EAAE,IAAIf,aAAJ;AAFwB,CAAjB,CAAf;;AAKA,MAAMgB,OAAO,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACvC,UAAQA,MAAM,CAACC,IAAf;AACC;AACC,aAAOF,KAAP;AAFF;AAIA,CALD;AAOA;;;;;;;;;;AAQA,MAAMG,SAAS,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AAC5C,SAAOC,WAAW,CAACP,OAAD,EAAUK,YAAV,CAAlB;AACA,CAFD;;AAIA,MAAMG,KAAN,SAAoB/B,GAApB,CAAwB;AACvB,eAAagC,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAChD,UAAMC,SAAS,GAAGF,SAAS,CAACD,eAAV,GACf,MAAMC,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CADS,GAEf,EAFH;AAIA,WAAO;AAAEC,MAAAA;AAAF,KAAP;AACA;;AACDC,EAAAA,MAAM,GAAG;AAGR,WACC,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEjB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,MAAC,QAAD;AAAU,MAAA,KAAK,EAAEkB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,MAAC,aAAD,WAAmB;AAAEnC,MAAAA;AAAF,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACC,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAEC,MAAC,SAAD,eAAeiC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFD,CADD,CADD,CADD,CADD;AAYA;;AAvBsB;;AA0BxB,eAAeJ,KAAf","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport fetch from \"node-fetch\";\r\nimport App from \"next/app\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport theme from \"../theme\";\r\nimport GlobalStyle from \"../components/GlobalTheme\";\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { createHttpLink } from \"apollo-link-http\";\r\nimport { setContext } from \"apollo-link-context\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\n\r\nconst httpLink = createHttpLink({\r\n\turi: process.env.SHOPIFY_URI,\r\n\tfetch: fetch\r\n});\r\n\r\nconsole.log(process.env.SHOPIFY_URI)\r\n\r\nconst middlewareLink = setContext(() => ({\r\n\theaders: {\r\n\t\t\"X-Shopify-Storefront-Access-Token\": process.env.STOREFRONT_API\r\n\t}\r\n}));\r\n\r\nconst client = new ApolloClient({\r\n\tlink: middlewareLink.concat(httpLink),\r\n\tcache: new InMemoryCache()\r\n});\r\n\r\nconst reducer = (state = {}, action) => {\r\n\tswitch (action.type) {\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n/**\r\n * @param {object} initialState\r\n * @param {boolean} options.isServer indicates whether it is a server side or client side\r\n * @param {Request} options.req NodeJS Request object (not set when client applies initialState from server)\r\n * @param {Request} options.res NodeJS Request object (not set when client applies initialState from server)\r\n * @param {boolean} options.debug User-defined debug mode param\r\n * @param {string} options.storeKey This key will be used to preserve store in global namespace for safe HMR\r\n */\r\nconst makeStore = (initialState, options) => {\r\n\treturn createStore(reducer, initialState);\r\n};\r\n\r\nclass MyApp extends App {\r\n\tstatic async getInitialProps({ Component, ctx }) {\r\n\t\tconst pageProps = Component.getInitialProps\r\n\t\t\t? await Component.getInitialProps(ctx)\r\n\t\t\t: {};\r\n\r\n\t\treturn { pageProps };\r\n\t}\r\n\trender() {\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<ApolloProvider client={client}>\r\n\t\t\t\t<Provider store={store}>\r\n\t\t\t\t\t<ThemeProvider {...{ theme }}>\r\n\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t<GlobalStyle />\r\n\t\t\t\t\t\t\t<Component {...pageProps} />\r\n\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t</ThemeProvider>\r\n\t\t\t\t</Provider>\r\n\t\t\t</ApolloProvider>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default MyApp;\r\n"]},"metadata":{},"sourceType":"module"}